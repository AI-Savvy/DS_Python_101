{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NumPy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-1.0\n",
      "1.1\n",
      "5.2\n"
     ]
    }
   ],
   "source": [
    "print(np.cos(np.pi))\n",
    "print(np.sqrt(1.21))\n",
    "print(np.log(np.exp(5.2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3]\n",
      "\n",
      "[[1 2 1]\n",
      " [4 5 9]\n",
      " [1 8 9]]\n",
      "\n",
      "[[1 4 1]\n",
      " [2 5 8]\n",
      " [1 9 9]]\n"
     ]
    }
   ],
   "source": [
    "# create numpy arrays by converting lists\n",
    "vec = np.array([1,2,3])\n",
    "print(vec)\n",
    "\n",
    "# create matrices by converting lists of lists\n",
    "mat = np.array([[1,2,1],[4,5,9],[1,8,9]])\n",
    "print('')\n",
    "print(mat)\n",
    "print('')\n",
    "print(mat.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14]\n",
      "\n",
      "[ 3  9 15]\n"
     ]
    }
   ],
   "source": [
    "# other ways to create numpy arrays\n",
    "vec2 = np.arange(0,15)\n",
    "print(vec2)\n",
    "print('')\n",
    "vec3 = np.arange(3,21,6)\n",
    "print(vec3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.         0.55555556 1.11111111 1.66666667 2.22222222 2.77777778\n",
      " 3.33333333 3.88888889 4.44444444 5.        ]\n",
      "\n",
      "[[0.         0.55555556]\n",
      " [1.11111111 1.66666667]\n",
      " [2.22222222 2.77777778]\n",
      " [3.33333333 3.88888889]\n",
      " [4.44444444 5.        ]]\n",
      "[[0.         0.55555556]\n",
      " [1.11111111 1.66666667]\n",
      " [2.22222222 2.77777778]\n",
      " [3.33333333 3.88888889]\n",
      " [4.44444444 5.        ]]\n",
      "[0.         0.55555556 1.11111111 1.66666667 2.22222222 2.77777778\n",
      " 3.33333333 3.88888889 4.44444444 5.        ]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "vec4 = np.linspace(0,5,10)\n",
    "print(vec4)\n",
    "print('')\n",
    "print(vec4.reshape(5,2))\n",
    "vec4_reshaped = vec4.reshape(5,2)\n",
    "print(vec4_reshaped)\n",
    "print(vec4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]]\n",
      "\n",
      "[[1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1.]]\n",
      "\n",
      "[[1. 0. 0. 0. 0.]\n",
      " [0. 1. 0. 0. 0.]\n",
      " [0. 0. 1. 0. 0.]\n",
      " [0. 0. 0. 1. 0.]\n",
      " [0. 0. 0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "mat2 = np.zeros([5,3])\n",
    "print(mat2)\n",
    "mat3 = np.ones((3,5))\n",
    "print('')\n",
    "print(mat3)\n",
    "mat4 = np.eye(5)\n",
    "print('')\n",
    "print(mat4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 4 5]\n",
      "[3 4 5 6 7]\n",
      "[ 4  6  8 10 12]\n",
      "[ 3  8 15 24 35]\n",
      "[1.         0.5        0.33333333 0.25       0.2       ]\n",
      "[1.73205081 2.         2.23606798 2.44948974 2.64575131]\n"
     ]
    }
   ],
   "source": [
    "# '+-*/' arrays together if they're the right size\n",
    "vec5 = np.arange(1,6)\n",
    "vec6 = np.arange(3,8)\n",
    "print(vec5)\n",
    "print(vec6)\n",
    "print(vec5+vec6)\n",
    "print(vec5*vec6)\n",
    "print(1/vec5)\n",
    "print(np.sqrt(vec6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 1]\n",
      " [4 5 9]\n",
      " [1 8 9]]\n",
      "\n",
      "[1 2 3]\n",
      "\n",
      "[ 8 41 44]\n"
     ]
    }
   ],
   "source": [
    "# matrix multiplication\n",
    "print(mat)\n",
    "print('')\n",
    "print(vec)\n",
    "print()\n",
    "product = np.matmul(mat,vec)\n",
    "print(product)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 2. 3.]\n",
      "\n",
      "[[ 0.5         0.18518519 -0.24074074]\n",
      " [ 0.5        -0.14814815  0.09259259]\n",
      " [-0.5         0.11111111  0.05555556]]\n"
     ]
    }
   ],
   "source": [
    "print(np.linalg.solve(mat,product))\n",
    "print('')\n",
    "print(np.linalg.inv(mat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['blue' 'red' 'orange' 'purple' 'purple' 'orange' 'Red' '6']\n",
      "['6' 'Red' 'blue' 'orange' 'purple' 'red']\n"
     ]
    }
   ],
   "source": [
    "# finding the unique values in an array\n",
    "vec7 = np.array(['blue','red','orange','purple','purple','orange','Red',6])\n",
    "print(vec7)\n",
    "print(np.unique(vec7))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.00571756 0.66985063 0.18653985 0.65940578 0.79950934]\n",
      " [0.08725537 0.17817522 0.1011236  0.89748825 0.27634182]\n",
      " [0.66580455 0.57127231 0.43047023 0.87342973 0.93461875]\n",
      " [0.34175914 0.63974621 0.76147564 0.13002786 0.57014154]\n",
      " [0.65603462 0.69052212 0.66521194 0.53582895 0.1614566 ]]\n",
      "\n",
      "[[ 0.01635095 -0.2004346   0.29038178  0.80657622  0.03386536]\n",
      " [-0.38461892  0.12706204  0.31125072  0.51663761 -0.98941847]\n",
      " [ 0.50808738  0.26679777 -2.28062719 -0.65587191 -2.26806076]\n",
      " [ 1.37080178  0.17007062 -0.76334452  1.30061214  0.71586552]\n",
      " [-0.21346519 -1.28237702 -1.19879273 -1.33308608 -0.83035851]\n",
      " [ 0.24198436  0.38618479 -0.06891618 -0.80186566 -1.07648916]\n",
      " [-0.20469865  0.57634159  0.70480934  0.05219733 -1.11108458]\n",
      " [ 0.03548628 -0.47695122 -0.15895412 -0.67551192  0.8435323 ]\n",
      " [-0.82310251 -0.89971816  0.44793857 -0.3933196  -0.11668351]\n",
      " [-1.36678889  0.9780131   0.80804491  0.23279744  0.68676099]]\n"
     ]
    }
   ],
   "source": [
    "# using numpy to generate samples of a random variable\n",
    "rand_mat = np.random.rand(5,5) # uniform random variable\n",
    "print(rand_mat)\n",
    "rand_mat2 = np.random.randn(10,5) # standard normal random variable\n",
    "print('')\n",
    "print(rand_mat2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4995683041475835\n",
      "0.8216211824030284\n"
     ]
    }
   ],
   "source": [
    "# using numpy for statistical tools on arrays\n",
    "print(np.mean(rand_mat))\n",
    "print(np.std(rand_mat2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0057175591098743705\n",
      "1.370801780935712\n"
     ]
    }
   ],
   "source": [
    "print(np.min(rand_mat))\n",
    "print(np.max(rand_mat2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.91111802 -0.30599144 -0.13578269  1.52992515 -1.49122715  1.8875271\n",
      " -1.64352785  0.59944766 -0.08685284 -0.46455311  0.21760562 -0.39301627\n",
      "  1.04080447  0.96846184 -1.43386662  0.74628762 -0.02095666  0.5395784\n",
      " -0.73273427]\n",
      "-1.6435278522319188\n"
     ]
    }
   ],
   "source": [
    "# access entries in a numpy vector\n",
    "rand_vec = np.random.randn(19)\n",
    "print(rand_vec)\n",
    "print(rand_vec[6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.49122715  1.8875271  -1.64352785  0.59944766 -0.08685284]\n"
     ]
    }
   ],
   "source": [
    "# access multiple entries at once using ':'\n",
    "print(rand_vec[4:9])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  3  6  9 12]\n",
      "[ 0.91111802  1.52992515 -1.64352785 -0.46455311  1.04080447]\n"
     ]
    }
   ],
   "source": [
    "# access multiple non-consecutive entries using np.arange\n",
    "print(np.arange(0,15,3))\n",
    "print(rand_vec[np.arange(0,15,3)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.00571756 0.66985063 0.18653985 0.65940578 0.79950934]\n",
      " [0.08725537 0.17817522 0.1011236  0.89748825 0.27634182]\n",
      " [0.66580455 0.57127231 0.43047023 0.87342973 0.93461875]\n",
      " [0.34175914 0.63974621 0.76147564 0.13002786 0.57014154]\n",
      " [0.65603462 0.69052212 0.66521194 0.53582895 0.1614566 ]]\n",
      "0.10112360170975021\n",
      "0.10112360170975021\n"
     ]
    }
   ],
   "source": [
    "# matrices\n",
    "print(rand_mat)\n",
    "print(rand_mat[1][2])\n",
    "print(rand_mat[1,2])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.66985063 0.18653985]\n",
      " [0.17817522 0.1011236 ]]\n"
     ]
    }
   ],
   "source": [
    "print(rand_mat[0:2,1:3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.91111802 -0.30599144 -0.13578269  1.52992515 -1.49122715  1.8875271\n",
      " -1.64352785  0.59944766 -0.08685284 -0.46455311  0.21760562 -0.39301627\n",
      "  1.04080447  0.96846184 -1.43386662  0.74628762 -0.02095666  0.5395784\n",
      " -0.73273427]\n",
      "\n",
      "[ 0.91111802 -0.30599144 -0.13578269  4.          4.          1.8875271\n",
      " -1.64352785  0.59944766 -0.08685284 -0.46455311  0.21760562 -0.39301627\n",
      "  1.04080447  0.96846184 -1.43386662  0.74628762 -0.02095666  0.5395784\n",
      " -0.73273427]\n",
      "\n",
      "[ 0.91111802 -0.30599144 -0.13578269  1.          2.          1.8875271\n",
      " -1.64352785  0.59944766 -0.08685284 -0.46455311  0.21760562 -0.39301627\n",
      "  1.04080447  0.96846184 -1.43386662  0.74628762 -0.02095666  0.5395784\n",
      " -0.73273427]\n"
     ]
    }
   ],
   "source": [
    "# changing some values in an array\n",
    "print(rand_vec)\n",
    "rand_vec[3:5] = 4\n",
    "print('')\n",
    "print(rand_vec)\n",
    "rand_vec[3:5] = [1,2]\n",
    "print('')\n",
    "print(rand_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.00571756 0.66985063 0.18653985 0.65940578 0.79950934]\n",
      " [0.08725537 0.17817522 0.1011236  0.89748825 0.27634182]\n",
      " [0.66580455 0.57127231 0.43047023 0.87342973 0.93461875]\n",
      " [0.34175914 0.63974621 0.76147564 0.13002786 0.57014154]\n",
      " [0.65603462 0.69052212 0.66521194 0.53582895 0.1614566 ]]\n",
      "\n",
      "[[0.00571756 0.66985063 0.18653985 0.65940578 0.79950934]\n",
      " [0.08725537 0.17817522 0.1011236  0.         0.        ]\n",
      " [0.66580455 0.57127231 0.43047023 0.         0.        ]\n",
      " [0.34175914 0.63974621 0.76147564 0.13002786 0.57014154]\n",
      " [0.65603462 0.69052212 0.66521194 0.53582895 0.1614566 ]]\n"
     ]
    }
   ],
   "source": [
    "print(rand_mat)\n",
    "rand_mat[1:3,3:5] = 0\n",
    "print('')\n",
    "print(rand_mat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.00571756 0.66985063 0.18653985]\n",
      " [0.08725537 0.17817522 0.1011236 ]]\n",
      "[[3. 3. 3.]\n",
      " [3. 3. 3.]]\n"
     ]
    }
   ],
   "source": [
    "sub_mat = rand_mat[0:2,0:3]\n",
    "print(sub_mat)\n",
    "sub_mat[:] = 3\n",
    "print(sub_mat)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3.         3.         3.         0.65940578 0.79950934]\n",
      " [3.         3.         3.         0.         0.        ]\n",
      " [0.66580455 0.57127231 0.43047023 0.         0.        ]\n",
      " [0.34175914 0.63974621 0.76147564 0.13002786 0.57014154]\n",
      " [0.65603462 0.69052212 0.66521194 0.53582895 0.1614566 ]]\n"
     ]
    }
   ],
   "source": [
    "print(rand_mat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[99. 99. 99.]\n",
      " [99. 99. 99.]]\n",
      "[[3.         3.         3.         0.65940578 0.79950934]\n",
      " [3.         3.         3.         0.         0.        ]\n",
      " [0.66580455 0.57127231 0.43047023 0.         0.        ]\n",
      " [0.34175914 0.63974621 0.76147564 0.13002786 0.57014154]\n",
      " [0.65603462 0.69052212 0.66521194 0.53582895 0.1614566 ]]\n"
     ]
    }
   ],
   "source": [
    "sub_mat2 = rand_mat[0:2,0:3].copy()\n",
    "sub_mat2[:] = 99\n",
    "print(sub_mat2)\n",
    "print(rand_mat)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.33060376 -1.3763203   2.21021659 -0.93138542  1.84325027  0.632906\n",
      "  1.14512342  0.89654097 -1.11191735 -0.32311124 -1.18351268 -0.63561396\n",
      "  0.22613115 -0.3382393   0.34561256]\n",
      "[ True False  True False  True  True  True  True False False False False\n",
      "  True False  True]\n",
      "[1.33060376 2.21021659 1.84325027 0.632906   1.14512342 0.89654097\n",
      " 0.22613115 0.34561256]\n"
     ]
    }
   ],
   "source": [
    "# access entries with logicals\n",
    "rand_vec = np.random.randn(15)\n",
    "\n",
    "print(rand_vec)\n",
    "print(rand_vec>0)\n",
    "print(rand_vec[rand_vec>0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.01635095 -0.2004346   0.29038178  0.80657622  0.03386536]\n",
      " [-0.38461892  0.12706204  0.31125072  0.51663761 -0.98941847]\n",
      " [ 0.50808738  0.26679777 -2.28062719 -0.65587191 -2.26806076]\n",
      " [ 1.37080178  0.17007062 -0.76334452  1.30061214  0.71586552]\n",
      " [-0.21346519 -1.28237702 -1.19879273 -1.33308608 -0.83035851]\n",
      " [ 0.24198436  0.38618479 -0.06891618 -0.80186566 -1.07648916]\n",
      " [-0.20469865  0.57634159  0.70480934  0.05219733 -1.11108458]\n",
      " [ 0.03548628 -0.47695122 -0.15895412 -0.67551192  0.8435323 ]\n",
      " [-0.82310251 -0.89971816  0.44793857 -0.3933196  -0.11668351]\n",
      " [-1.36678889  0.9780131   0.80804491  0.23279744  0.68676099]]\n",
      "[0.01635095 0.29038178 0.80657622 0.03386536 0.12706204 0.31125072\n",
      " 0.51663761 0.50808738 0.26679777 1.37080178 0.17007062 1.30061214\n",
      " 0.71586552 0.24198436 0.38618479 0.57634159 0.70480934 0.05219733\n",
      " 0.03548628 0.8435323  0.44793857 0.9780131  0.80804491 0.23279744\n",
      " 0.68676099]\n"
     ]
    }
   ],
   "source": [
    "print(rand_mat2)\n",
    "print(rand_mat2[rand_mat2>0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1.33060376 -1.3763203   2.21021659 -0.93138542  1.84325027  0.632906\n",
      "  1.14512342  0.89654097 -1.11191735 -0.32311124 -1.18351268 -0.63561396\n",
      "  0.22613115 -0.3382393   0.34561256]\n",
      "\n",
      "[-5.         -1.3763203  -5.         -0.93138542 -5.         -5.\n",
      " -5.         -5.         -1.11191735 -0.32311124 -1.18351268 -0.63561396\n",
      "  0.22613115 -0.3382393   0.34561256]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(rand_vec)\n",
    "print('')\n",
    "rand_vec[rand_vec>0.5] = -5\n",
    "print(rand_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save some arrays on the disk to use later\n",
    "np.save('saved_file_name',rand_mat2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.savez('zipped_file_name',rand_mat=rand_mat,rand_mat2=rand_mat2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.01635095 -0.2004346   0.29038178  0.80657622  0.03386536]\n",
      " [-0.38461892  0.12706204  0.31125072  0.51663761 -0.98941847]\n",
      " [ 0.50808738  0.26679777 -2.28062719 -0.65587191 -2.26806076]\n",
      " [ 1.37080178  0.17007062 -0.76334452  1.30061214  0.71586552]\n",
      " [-0.21346519 -1.28237702 -1.19879273 -1.33308608 -0.83035851]\n",
      " [ 0.24198436  0.38618479 -0.06891618 -0.80186566 -1.07648916]\n",
      " [-0.20469865  0.57634159  0.70480934  0.05219733 -1.11108458]\n",
      " [ 0.03548628 -0.47695122 -0.15895412 -0.67551192  0.8435323 ]\n",
      " [-0.82310251 -0.89971816  0.44793857 -0.3933196  -0.11668351]\n",
      " [-1.36678889  0.9780131   0.80804491  0.23279744  0.68676099]]\n",
      "\n",
      "<numpy.lib.npyio.NpzFile object at 0x7fe5c89d7340>\n"
     ]
    }
   ],
   "source": [
    "# loading the file\n",
    "loaded_vec = np.load('saved_file_name.npy')\n",
    "loaded_zip = np.load('zipped_file_name.npz')\n",
    "\n",
    "print(loaded_vec)\n",
    "print('')\n",
    "print(loaded_zip)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3.         3.         3.         0.65940578 0.79950934]\n",
      " [3.         3.         3.         0.         0.        ]\n",
      " [0.66580455 0.57127231 0.43047023 0.         0.        ]\n",
      " [0.34175914 0.63974621 0.76147564 0.13002786 0.57014154]\n",
      " [0.65603462 0.69052212 0.66521194 0.53582895 0.1614566 ]]\n",
      "\n",
      "[[ 0.01635095 -0.2004346   0.29038178  0.80657622  0.03386536]\n",
      " [-0.38461892  0.12706204  0.31125072  0.51663761 -0.98941847]\n",
      " [ 0.50808738  0.26679777 -2.28062719 -0.65587191 -2.26806076]\n",
      " [ 1.37080178  0.17007062 -0.76334452  1.30061214  0.71586552]\n",
      " [-0.21346519 -1.28237702 -1.19879273 -1.33308608 -0.83035851]\n",
      " [ 0.24198436  0.38618479 -0.06891618 -0.80186566 -1.07648916]\n",
      " [-0.20469865  0.57634159  0.70480934  0.05219733 -1.11108458]\n",
      " [ 0.03548628 -0.47695122 -0.15895412 -0.67551192  0.8435323 ]\n",
      " [-0.82310251 -0.89971816  0.44793857 -0.3933196  -0.11668351]\n",
      " [-1.36678889  0.9780131   0.80804491  0.23279744  0.68676099]]\n",
      "[[3.         3.         3.         0.65940578 0.79950934]\n",
      " [3.         3.         3.         0.         0.        ]\n",
      " [0.66580455 0.57127231 0.43047023 0.         0.        ]\n",
      " [0.34175914 0.63974621 0.76147564 0.13002786 0.57014154]\n",
      " [0.65603462 0.69052212 0.66521194 0.53582895 0.1614566 ]]\n"
     ]
    }
   ],
   "source": [
    "print(loaded_zip['rand_mat'])\n",
    "print('')\n",
    "print(loaded_zip['rand_mat2'])\n",
    "\n",
    "new_array  = loaded_zip['rand_mat']\n",
    "print(new_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3.         3.         3.         0.65940578 0.79950934]\n",
      " [3.         3.         3.         0.         0.        ]\n",
      " [0.66580455 0.57127231 0.43047023 0.         0.        ]\n",
      " [0.34175914 0.63974621 0.76147564 0.13002786 0.57014154]\n",
      " [0.65603462 0.69052212 0.66521194 0.53582895 0.1614566 ]]\n",
      "\n",
      "[[3.         3.         3.         0.65940578 0.79950934]\n",
      " [3.         3.         3.         0.         0.        ]\n",
      " [0.66580455 0.57127231 0.43047023 0.         0.        ]\n",
      " [0.34175914 0.63974621 0.76147564 0.13002786 0.57014154]\n",
      " [0.65603462 0.69052212 0.66521194 0.53582895 0.1614566 ]]\n"
     ]
    }
   ],
   "source": [
    "# save/load as text files (but only single variables)\n",
    "np.savetxt('text_file_name.txt',rand_mat,delimiter=',')\n",
    "rand_mat_txt = np.loadtxt('text_file_name.txt',delimiter=',')\n",
    "print(rand_mat)\n",
    "print('')\n",
    "print(rand_mat_txt)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
